// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/GlobantObrikosina/golang-rest-api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseBooksManager is a mock of DatabaseBooksManager interface.
type MockDatabaseBooksManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseBooksManagerMockRecorder
}

// MockDatabaseBooksManagerMockRecorder is the mock recorder for MockDatabaseBooksManager.
type MockDatabaseBooksManagerMockRecorder struct {
	mock *MockDatabaseBooksManager
}

// NewMockDatabaseBooksManager creates a new mock instance.
func NewMockDatabaseBooksManager(ctrl *gomock.Controller) *MockDatabaseBooksManager {
	mock := &MockDatabaseBooksManager{ctrl: ctrl}
	mock.recorder = &MockDatabaseBooksManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseBooksManager) EXPECT() *MockDatabaseBooksManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabaseBooksManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseBooksManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseBooksManager)(nil).Close))
}

// CreateBook mocks base method.
func (m *MockDatabaseBooksManager) CreateBook(book *models.Book) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", book)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockDatabaseBooksManagerMockRecorder) CreateBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockDatabaseBooksManager)(nil).CreateBook), book)
}

// DeleteBookByID mocks base method.
func (m *MockDatabaseBooksManager) DeleteBookByID(bookId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookByID", bookId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookByID indicates an expected call of DeleteBookByID.
func (mr *MockDatabaseBooksManagerMockRecorder) DeleteBookByID(bookId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookByID", reflect.TypeOf((*MockDatabaseBooksManager)(nil).DeleteBookByID), bookId)
}

// GetAllBooks mocks base method.
func (m *MockDatabaseBooksManager) GetAllBooks(filterCondition map[string][]string) (*models.BookList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks", filterCondition)
	ret0, _ := ret[0].(*models.BookList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockDatabaseBooksManagerMockRecorder) GetAllBooks(filterCondition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockDatabaseBooksManager)(nil).GetAllBooks), filterCondition)
}

// GetBookByID mocks base method.
func (m *MockDatabaseBooksManager) GetBookByID(bookId int) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", bookId)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockDatabaseBooksManagerMockRecorder) GetBookByID(bookId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockDatabaseBooksManager)(nil).GetBookByID), bookId)
}

// UpdateBookByID mocks base method.
func (m *MockDatabaseBooksManager) UpdateBookByID(bookId int, bookData models.Book) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookByID", bookId, bookData)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBookByID indicates an expected call of UpdateBookByID.
func (mr *MockDatabaseBooksManagerMockRecorder) UpdateBookByID(bookId, bookData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookByID", reflect.TypeOf((*MockDatabaseBooksManager)(nil).UpdateBookByID), bookId, bookData)
}
